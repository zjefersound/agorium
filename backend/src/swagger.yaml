openapi: 3.0.0
info:
  title: Agorium API Docs
  version: 0.0.1

servers:
  - url: http://localhost/api

paths:
  /ping:
    get:
      responses:
        "200":
          description: Pong

  #region Users

  /signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  default: user@email.com
                username:
                  type: string
                fullName:
                  type: string
                  default: string string
                password:
                  type: string
                avatar:
                  type: string
                  format: base64
            encoding:
              avatar:
                contentType: image/png, image/jpeg
      responses:
        "201":
          description: User registered
        "400":
          description: Invalid input
      tags:
        - user

  /login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  default: user@email.com
                password:
                  type: string
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials
      tags:
        - user

  /user/me:
    get:
      summary: Get self user details
      responses:
        "200":
          description: User details retrieved
        "401":
          description: Unauthorized
      tags:
        - user
  /user/me/info:
    put:
      summary: Update self user details
      description: Update the logged-in user's details like full name, username, and email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "John Doe"
                username:
                  type: string
                  example: "johndoe"
                email:
                  type: string
                  example: "johndoe@email.com"
      responses:
        "200":
          description: User updated successfully
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
      tags:
        - user

  /user/me/password:
    put:
      summary: Update self user password
      description: Update the logged-in user's password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  example: "string"
                password:
                  type: string
                  example: "strong"

      responses:
        "200":
          description: Password updated successfully
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
      tags:
        - user

  /user/me/avatar:
    post:
      summary: Update self user avatar
      description: Update the logged-in user's avatar.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: base64
            encoding:
              avatar:
                contentType: image/png, image/jpeg
      responses:
        "200":
          description: User avatar updated successfully
        "400":
          description: Error updating user avatar
      tags:
        - user

  /user/avatar/{id}/{path}:
    get:
      summary: Get user avatar
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User Id
      responses:
        "200":
          description: User avatar retrieved
        "401":
          description: Unauthorized
      tags:
        - user

  #endregion

  #region Posts

  /post:
    post:
      summary: "Create a new post"
      description: "Creates a new post with the provided details. If the category or tags do not exist, they will be created."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "My New Post"
                content:
                  type: string
                  example: "This is the content of the post."
                categoryId:
                  type: integer
                  example: 1
                tags:
                  type: array
                  items:
                    type: string
                  example: ["Tech", "Innovation"]
      responses:
        "200":
          description: Post saved
        "401":
          description: Unauthorized
      tags:
        - posts

  /post/{postId}:
    get:
      summary: "Get a post by ID"
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Post retrieved successfully
        "404":
          description: Post not found
        "401":
          description: Unauthorized
      tags:
        - posts
    put:
      summary: "Update an existing post"
      description: "Updates the details of an existing post. If the category or tags do not exist, they will be created."
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Post Title"
                content:
                  type: string
                  example: "Updated content of the post."
                categoryId:
                  type: integer
                  example: 2
                tags:
                  type: array
                  items:
                    type: string
                  example: ["Science", "Discovery"]
      responses:
        "200":
          description: Post saved
        "401":
          description: Unauthorized
      tags:
        - posts
    delete:
      summary: "Delete a post"
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Post deleted successfully
        "404":
          description: Post not found
        "401":
          description: Unauthorized
      tags:
        - posts

  /post/{postId}/favorite-comment:
    patch:
      summary: "Set favorite comment"
      description: "Updates the details of an existing post to set the favorite comment"
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                favoriteCommentId:
                  type: integer
                  example: 1
      responses:
        "200":
          description: Post saved
        "401":
          description: Unauthorized
      tags:
        - posts

  /posts:
    get:
      summary: "Search posts with pagination and sorting"
      parameters:
        - in: query
          name: term
          required: false
          schema:
            type: string
            example: "post"
          description: "Optional search term for post title."
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
          description: "Page number for pagination, default is 1."
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            example: 10
          description: "Number of items per page, default is 10."
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            example: "title"
          description: "Field to sort by, e.g., id or title."
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            example: "asc"
          description: "Sort order, either asc or desc."
        - in: query
          name: categoryId
          required: false
          schema:
            type: integer
            example: "1"
          description: "Filter by category"
        - in: query
          name: tagId
          required: false
          schema:
            type: integer
            example: "1"
          description: "Filter by tag"
      responses:
        "200":
          description: Categories retrieved successfully
        "401":
          description: Unauthorized
      tags:
        - posts

  #endregion

  #region Comments

  /post/{postId}/comments:
    get:
      summary: Get comments for a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: List of comments retrieved
        "404":
          description: Post not found
        "401":
          description: Unauthorized
      security:
        - BearerAuth: []
      tags:
        - comment

  /post/{postId}/comment:
    post:
      summary: Add a comment to a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            default: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                parentCommentId:
                  type: integer
                  default: 0
      responses:
        "201":
          description: Comment added
        "404":
          description: Post not found
        "401":
          description: Unauthorized
      security:
        - BearerAuth: []
      tags:
        - comment

  /post/{postId}/comment/{commentId}:
    get:
      summary: Get a comment and its children
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            default: 1
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: Comment
        "404":
          description: Comment or post not found
        "401":
          description: Unauthorized
      security:
        - BearerAuth: []
      tags:
        - comment
    put:
      summary: Update a comment
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "200":
          description: Comment updated
        "404":
          description: Comment or post not found
        "401":
          description: Unauthorized
      security:
        - BearerAuth: []
      tags:
        - comment
    delete:
      summary: Delete a comment
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Comment deleted
        "404":
          description: Comment or post not found
        "401":
          description: Unauthorized
      security:
        - BearerAuth: []
      tags:
        - comment

  #endregion

  #region Categories

  /category:
    post:
      summary: "Add a category"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  example: "Science"
                description:
                  type: string
                  example: "A category about scientific topics."
      responses:
        "201":
          description: Category created successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      tags:
        - category

  /category/{categoryId}:
    get:
      summary: "Get a category by ID"
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Category retrieved successfully
        "404":
          description: Category not found
        "401":
          description: Unauthorized
      tags:
        - category
    put:
      summary: "Update a category"
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  example: "Science"
                description:
                  type: string
                  example: "Updated category description."
      responses:
        "200":
          description: Category updated successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      tags:
        - category
    delete:
      summary: "Delete a category"
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Category deleted successfully
        "404":
          description: Category not found
        "401":
          description: Unauthorized
      tags:
        - category

  /categories:
    get:
      summary: "Search categories with pagination and sorting"
      parameters:
        - in: query
          name: term
          required: false
          schema:
            type: string
            example: "science"
          description: "Optional search term for category name."
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
          description: "Page number for pagination, default is 1."
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            example: 10
          description: "Number of items per page, default is 10."
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            example: "name"
          description: "Field to sort by, e.g., name or description."
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            example: "asc"
          description: "Sort order, either asc or desc."
      responses:
        "200":
          description: Categories retrieved successfully
        "401":
          description: Unauthorized
      tags:
        - category

  /categories/trending:
    get:
      summary: "Search trending categories"
      responses:
        "200":
          description: Categories retrieved successfully
        "401":
          description: Unauthorized
      tags:
        - category

  #endregion

  /tags:
    get:
      summary: "Get a list of tags"
      parameters:
        - in: query
          name: term
          required: false
          schema:
            type: string
            example: "technology"
          description: "Optional search term for tag name."
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
          description: "Page number for pagination, default is 1."
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            example: 10
          description: "Number of items per page, default is 10."
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            example: "name"
          description: "Field to sort by, e.g., name."
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            example: "asc"
          description: "Sort order, either asc or desc."
      responses:
        "200":
          description: Tags retrieved successfully
        "401":
          description: Unauthorized
      tags:
        - tag
  /tags/trending:
    get:
      summary: "Search trending tags"
      responses:
        "200":
          description: Tags retrieved successfully
        "401":
          description: Unauthorized
      tags:
        - tag

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
