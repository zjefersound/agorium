openapi: 3.0.0
info:
  title: Agorium API Docs
  version: 0.0.1

servers:
  - url: http://localhost/api

paths:
  /ping:
    get:
      responses:
        "200":
          description: Pong

  /signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  default: user@email.com
                username:
                  type: string
                fullName:
                  type: string
                  default: string string
                password:
                  type: string
                avatar:
                  type: string
                  format: base64
            encoding:
              avatar:
                contentType: image/png, image/jpeg
      responses:
        "201":
          description: User registered
        "400":
          description: Invalid input
      tags:
        - user

  /login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  default: user@email.com
                password:
                  type: string
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials
      tags:
        - user

  /user/me:
    get:
      summary: Get self user details
      responses:
        "200":
          description: User details retrieved
        "401":
          description: Unauthorized
      security:
        - BearerAuth: []
      tags:
        - user
  /user/avatar/{id}:
    get:
      summary: Get user avatar
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: User Id
      responses:
        "200":
          description: User avatar retrieved
        "401":
          description: Unauthorized
      security:
        - BearerAuth: []
      tags:
        - user

  /posts:
    post:
      summary: "Create a new post"
      description: "Creates a new post with the provided details. If the category or tags do not exist, they will be created."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "My New Post"
                content:
                  type: string
                  example: "This is the content of the post."
                categoryId:
                  type: int
                  example: 1
                tags:
                  type: array
                  items:
                    type: string
                  example: ["Tech", "Innovation"]
      responses:
        "200":
          description: User post saved
        "401":
          description: Unauthorized
      tags:
        - posts

  /posts/{postId}:
    put:
      summary: "Update an existing post"
      description: "Updates the details of an existing post. If the category or tags do not exist, they will be created."
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Post Title"
                content:
                  type: string
                  example: "Updated content of the post."
                category:
                  type: string
                  example: "Science"
                tags:
                  type: array
                  items:
                    type: string
                  example: ["Science", "Discovery"]
      tags:
        - posts

  /category:
    post:
      summary: "Add a category"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  example: "Science"
      responses:
        "200":
          description: User category saved
        "401":
          description: Unauthorized
      tags:
        - category

  /category/{categoryId}:
    put:
      summary: "Update a category"
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  example: "Science"
      responses:
        "200":
          description: User category saved
        "401":
          description: Unauthorized
      tags:
        - category

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
